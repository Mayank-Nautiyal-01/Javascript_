### 🚀 JavaScript Code Execution & Call Stack Explained 

JavaScript ka code execute hone ka ek specific process hota hai, jo **Execution Context** aur **Call Stack** ke through manage hota hai. Chalo, step-by-step samajhte hain.  

---

## **🔹 Step 1: JavaScript Code Load Hota Hai**  
Jab JavaScript engine kisi script ko execute karta hai, toh sabse pehle ek **Global Execution Context (GEC)** create hota hai.

```javascript
let val1 = 10;
let val2 = 5;

function addNum(num1, num2) {
    let total = num1 + num2;
    return total;
}

let result1 = addNum(val1, val2);
let result2 = addNum(10, 2);
```

💡 **Execution Context do phases me work karta hai:**
1. **Memory Creation Phase (Hoisting Step)**
2. **Execution Phase (Code Run Hota Hai)**  

---

## **🔹 Step 2: Memory Creation Phase (Hoisting)**
🔹 **Is phase me JavaScript variables aur functions ke liye memory allocate karti hai, lekin variables ki value `undefined` hoti hai.**

| Variable / Function | Memory Me Initial Value |
|---------------------|------------------------|
| `val1`             | `undefined` |
| `val2`             | `undefined` |
| `addNum`          | `Function Definition` |
| `result1`         | `undefined` |
| `result2`         | `undefined` |

---

## **🔹 Step 3: Execution Phase (Code Run Hota Hai)**
Ab JavaScript line-by-line code execute karti hai.

### **➡️ Step 3.1: val1 aur val2 Assign Hote Hain**
```javascript
let val1 = 10; // val1 = 10
let val2 = 5;  // val2 = 5
```
| Variable | Value |
|----------|--------|
| `val1`   | `10` |
| `val2`   | `5` |

---

### **➡️ Step 3.2: Function Call Hota Hai `addNum(val1, val2)`**
```javascript
let result1 = addNum(val1, val2);
```
🔹 **Jab function call hota hai, ek naya Execution Context create hota hai aur Call Stack me push hota hai.**

#### **Function Execution Start:**
```javascript
function addNum(num1, num2) {
    let total = num1 + num2;
    return total;
}
```

| Local Variable | Value |
|---------------|-------|
| `num1`       | `10` |
| `num2`       | `5` |
| `total`      | `10 + 5 = 15` |

🔹 **Function return karta hai `15`, jo `result1` me store ho jata hai.**
| Variable | Value |
|----------|--------|
| `result1` | `15` |

🔹 **Function execution complete hone ke baad, iska Execution Context Stack se pop ho jata hai (destroy ho jata hai).**

---

### **➡️ Step 3.3: Dusra Function Call `addNum(10, 2)`**
```javascript
let result2 = addNum(10, 2);
```
🔹 **Naya Execution Context create hoga aur Stack me push hoga.**

| Local Variable | Value |
|---------------|-------|
| `num1`       | `10` |
| `num2`       | `2` |
| `total`      | `10 + 2 = 12` |

🔹 **Function return karega `12`, jo `result2` me store hoga.**
| Variable | Value |
|----------|--------|
| `result2` | `12` |

🔹 **Function complete hone ke baad iska Execution Context Stack se pop ho jata hai.**

---

## **🔹 Step 4: Final Execution Context Destroy**
🔹 **Ab koi aur code run nahi ho raha, isliye Global Execution Context bhi Stack se pop ho jata hai.**  

🔹 **Final Memory State**
| Variable | Value |
|----------|--------|
| `val1`   | `10` |
| `val2`   | `5` |
| `result1` | `15` |
| `result2` | `12` |

---

## **🔹 Final Output**
```
result1 = 15
result2 = 12
```

---

## **🔥 Summary:**
✅ **Global Execution Context create hota hai**  
✅ **Memory phase me variables `undefined` hote hain**  
✅ **Execution phase me values assign hoti hain aur function calls hote hain**  
✅ **Har function ke liye ek new Execution Context banta hai jo execute hone ke baad destroy ho jata hai**  
✅ **Final values memory me store hoti hain, lekin function ke local variables destroy ho jate hain**  


//more depth explnation of callstack by ex::-


function one(){
    console.log("one");
    two();
}
function two(){
    console.log("two");
    three();
}
function three(){
    console.log("three");
    four();
}
function four(){
    console.log("Four");
}

one();
two();
three();
four();
```

---

## **🔹 Understanding the Call Stack**
JavaScript **Call Stack** ek LIFO (**Last In, First Out**) structure hai jo function calls ko track karta hai.

### **📝 Steps of Execution**
💡 **Call Stack me function tab tak rehta hai jab tak wo completely execute na ho jaye.**

---

### **🛠 Step 1: `one()` Function Call**
```javascript
one();
```
- Call Stack me `one()` function push hota hai.
- **`console.log("one")` print hota hai.**
- `two()` function call hota hai.

📌 **Call Stack:**  
```
one()
```
📌 **Output till now:**  
```
one
```

---

### **🛠 Step 2: `two()` Function Call**
```javascript
two();
```
- Call Stack me `two()` function push hota hai.
- **`console.log("two")` print hota hai.**
- `three()` function call hota hai.

📌 **Call Stack:**  
```
one()
two()
```
📌 **Output till now:**  
```
one
two
```

---

### **🛠 Step 3: `three()` Function Call**
```javascript
three();
```
- Call Stack me `three()` function push hota hai.
- **`console.log("three")` print hota hai.**
- `four()` function call hota hai.

📌 **Call Stack:**  
```
one()
two()
three()
```
📌 **Output till now:**  
```
one
two
three
```

---

### **🛠 Step 4: `four()` Function Call**
```javascript
four();
```
- Call Stack me `four()` function push hota hai.
- **`console.log("Four")` print hota hai.**
- Function execution complete hone ke baad **Call Stack se remove hota hai.**

📌 **Call Stack:**  
```
one()
two()
three()
four()
```
📌 **Output till now:**  
```
one
two
three
Four
```

✅ **`four()` complete hone ke baad Call Stack se remove hota hai.**  
✅ **`three()` complete hone ke baad remove hota hai.**  
✅ **`two()` complete hone ke baad remove hota hai.**  
✅ **`one()` complete hone ke baad remove hota hai.**  

📌 **Call Stack is now empty!**

---

### **🛠 Step 5: `two()` Function Call (Again)**
```javascript
two();
```
- Call Stack me `two()` function push hota hai.
- **`console.log("two")` print hota hai.**
- `three()` function call hota hai.

📌 **Call Stack:**  
```
two()
```
📌 **Output till now:**  
```
one
two
three
Four
two
```

✅ **Function execute hone ke baad Call Stack se remove hota hai.**

---

### **🛠 Step 6: `three()` Function Call (Again)**
```javascript
three();
```
- Call Stack me `three()` function push hota hai.
- **`console.log("three")` print hota hai.**
- `four()` function call hota hai.

📌 **Call Stack:**  
```
three()
```
📌 **Output till now:**  
```
one
two
three
Four
two
three
```

✅ **Function execute hone ke baad Call Stack se remove hota hai.**

---

### **🛠 Step 7: `four()` Function Call (Again)**
```javascript
four();
```
- Call Stack me `four()` function push hota hai.
- **`console.log("Four")` print hota hai.**

📌 **Call Stack:**  
```
four()
```
📌 **Output till now:**  
```
one
two
three
Four
two
three
Four
```

✅ **Function execute hone ke baad Call Stack se remove hota hai.**

---

### **🛠 Step 8: `four()` Function Call (Last Time)**
```javascript
four();
```
- Call Stack me `four()` function push hota hai.
- **`console.log("Four")` print hota hai.**

📌 **Call Stack:**  
```
four()
```
📌 **Output till now:**  
```
one
two
three
Four
two
three
Four
Four
```

✅ **Function execute hone ke baad Call Stack se remove hota hai.**

---

## **📌 Final Output**
```
one
two
three
Four
two
three
Four
Four
```

---

## **🔥 Key Takeaways**
✅ **JavaScript ka Call Stack ek LIFO (Last In, First Out) structure hota hai.**  
✅ **Har function jab call hota hai toh Call Stack me push hota hai aur execute hone ke baad pop ho jata hai.**  
✅ **Function `one()` → `two()` → `three()` → `four()` ka execution ek chain me hota hai.**  
✅ **Baad me `two()`, `three()`, aur `four()` dobara call hote hain, isliye output me repeat hota hai.**  

